name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  buildDir: ${{ github.workspace }}/build/

tests:
  name: ${{ matrix.make.name }} (${{ matrix.os }})
  runs-on: ${{ matrix.os }}
  strategy:
    fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, windows-2019, macos-10.15]
        rust: [stable]
        task:
          - name: Lint
            run: make check-clippy
        include:
          - os: ubuntu-18.04
            triplet: x64-linux
            rust: stable
            services: {}
            task:
              name: Format
              run: make check-fmt

          - os: ubuntu-20.04
            triplet: x64-linux
            rust: nightly
            services: {}
            task:
              name: Build docs
              run: make build-docs
          - os: ubuntu-20.04
            services: {}

          - os:  macos-10.15
            services: {}
            triplet: x64-osx

    steps:
      - uses: actions/checkout@v2

      - name: Prepare environment (ubuntu-20.04)
        run: |
          echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV
      - name: Prepare environment (macos-latest)
        run: |
          echo "SCCACHE_DIR=$HOME/Library/Caches/Mozilla.sccache" >> $GITHUB_ENV
      - name: Install sccache (ubuntu-20.04)
        if: matrix.os == 'ubuntu-20.04'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: v0.2.15
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          URL="$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz"
          echo "Downloading sccache from $URL"
          mkdir -p $HOME/.local/bin
          curl -L $URL | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod +x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          # brew update  # takes forever
          brew install sccache
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install Musl Tools
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt install -y musl-tools
          sudo ln -s /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc
          echo "TARGET_CC=musl-gcc" | tee -a $GITHUB_ENV
          rustup target add x86_64-unknown-linux-musl
      - name: Cache cargo registry and sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.SCCACHE_DIR }}
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.task.name }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.task.name }}-
      - name: Start sccache server
        run: sccache --start-server

      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

      - name: Stop sccache server
        run: sccache --stop-server || true

  test_python_example:
    name: Check python example
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        key: pip ${{ runner.os }} ${{ env.pythonLocation }} ${{ hashFiles('requirements.txt') }} ${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        pip install -r requirements.txt -r dev-requirements.txt
    - name: Check formatting
      if: always()
      run: |
        black --check examples/
    - name: Lint
      if: always()
      run: |
        flake8 examples/
    - name: Typecheck
      if: always()
      run: |
        mypy --ignore-missing-imports examples/
